name: 欧加真 6.1.118 Android 15 通用OKI内核

env:
  TZ: Asia/Shanghai
  CPU: 'sm8650'
  FEIL: 'oppo+oplus+realme'
  ANDROID_VERSION: 'android14'
  KERNEL_VERSION: '6.1'
  KERNEL_NAME: 'android14-11-o-gca13bffobf09'
  KERNELSU_VARIANT: 'SukiSU-Ultra'
  KERNELSU_BRANCH: 'susfs-main'

on:
  workflow_dispatch:
  # 取消此处注释代码可开启每日定时编译
#  schedule:
#    - cron: '0 23 * * *'  # UTC时间23点（北京时间次日7点）
    inputs:
      hook_method:
        description: hook模式(大部分情况manual即可，少数需切换sus su模式的场景才需要kprobes钩子)
        required: true
        type: choice
        default: 'manual'
        options:
          - 'manual'
          - 'kprobes'
      kpm_enable:
        description: '是否开启kpm(可能轻微增加耗电，不需要可关闭)'
        required: true
        type: choice
        default: 'true'
        options:
          - 'true'
          - 'false'
      lz4k_enable:
        description: '是否安装 LZ4KD 补丁'
        required: true
        type: choice
        default: 'false'
        options:
          - 'true'
          - 'false'
      lz4_enable:
        description: '是否安装 lz4 1.10.0 + zstd 1.5.7 补丁'
        required: true
        type: choice
        default: 'true'
        options:
          - 'true'
          - 'false'
      bbr_enable:
        description: "是否启用bbr算法(优化上行数据,对手机日用无太大意义甚至可能负优化;false关闭,true仅加入算法,default设为默认)"
        required: true
        type: choice
        default: 'false'
        options:
          - 'false'
          - 'true'
          - 'default'
      better_net:
        description: '是否开启网络功能增强优化配置(优化代理连接,IPV6等功能)'
        required: true
        type: choice
        default: 'true'
        options:
          - 'true'
          - 'false'
      ssg_enable:
        description: '是否启用三星SSG IO调度器(一加12等极少数机型开启后可能不开机,若出现bug请关闭此项)'
        required: true
        type: choice
        default: 'true'
        options:
          - 'true'
          - 'false'
      scx_enable:
        description: '是否安装风驰内核驱动(未完成)'
        required: true
        type: choice
        default: 'false'
        options:
          - 'true'
          - 'false'
      kernel_suffix:
        description: '内核后缀(留空默认,开头别加连字符,勿加空格等影响指令运行的保留字符)'
        required: false
        type: string
        default: 'zym234555-kpm'

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      ksuver: ${{ steps.ksu_version.outputs.ksuver }}
    steps:
      - name: 最大化建筑空间
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          swap-size-mb: 8192
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'

      - name: 安装配置环境依赖
        run: |
          sudo apt update && sudo apt upgrade -y
          sudo apt-get install curl bison flex make binutils dwarves git lld pahole zip perl make gcc python3 python-is-python3 bc libssl-dev libelf-dev -y
          sudo rm -rf ./llvm.sh
          sudo wget https://apt.llvm.org/llvm.sh
          sudo chmod +x llvm.sh
          sudo ./llvm.sh 20 all

      - name: 初始化源码仓库
        run: |
          rm -rf kernel_workspace && mkdir kernel_workspace && cd kernel_workspace
          echo "正在克隆源码仓库..."
          git clone --depth=1 https://github.com/cctv18/android_kernel_common_oneplus_sm8650 -b oneplus/sm8650_v_15.0.0_oneplus12_6.1.118 common
          echo "正在去除 ABI 保护 & 去除 dirty 后缀..."
          rm common/android/abi_gki_protected_exports_* || true
          for f in common/scripts/setlocalversion; do
            sed -i 's/ -dirty//g' "$f"
            sed -i '$i res=$(echo "$res" | sed '\''s/-dirty//g'\'')' "$f"
          done

      - name: 添加 SukiSU-Ultra
        id: ksu_version
        run: |
          cd kernel_workspace
          #if [[ "${{ env.KERNELSU_VARIANT }}" == "SukiSU-Ultra" ]]; then
          #  echo "BRANCH='-s susfs-main'" >> $GITHUB_ENV
          #fi
          curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU-Ultra/refs/heads/main/kernel/setup.sh" | bash -s susfs-main
          cd ./KernelSU
          KSU_VERSION=$(expr $(/usr/bin/git rev-list --count main) "+" 10700)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          echo "ksuver=$KSU_VERSION" >> $GITHUB_OUTPUT
          export KSU_VERSION=$KSU_VERSION
          sed -i "s/DKSU_VERSION=12800/DKSU_VERSION=$KSU_VERSION/" kernel/Makefile

      - name: 应用 SukiSU-Ultra & SUSFS 补丁
        run: |
          cd kernel_workspace
          git clone https://github.com/ShirkNeko/susfs4ksu.git -b gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}
          git clone https://github.com/ShirkNeko/SukiSU_patch.git
          cp ./susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch ./common/
          cp ./susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp ./susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
          cp ./SukiSU_patch/hooks/syscall_hooks.patch ./common/
          cd ./common
          patch -p1 < 50_add_susfs_in_gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch || true
          patch -p1 < syscall_hooks.patch || true
          
      - name: 应用lz4 1.10.0 & zstd 1.5.7补丁
        run: |
          if [ "${{ github.event.inputs.lz4_enable }}" == "true" ]; then
            echo "正在添加lz4 1.10.0 & zstd 1.5.7补丁…"
            cd kernel_workspace
            git clone https://github.com/cctv18/oppo_oplus_realme_sm8650.git
            cp ./oppo_oplus_realme_sm8650/zram_patch/001-lz4.patch ./common/
            cp ./oppo_oplus_realme_sm8650/zram_patch/lz4armv8.S ./common/lib
            cp ./oppo_oplus_realme_sm8650/zram_patch/002-zstd.patch ./common/
            cd ./common
            git apply -p1 < 001-lz4.patch || true
            patch -p1 < 002-zstd.patch || true
          fi

      - name: 应用 Hide Stuff 补丁
        run: |
          cd kernel_workspace/common
          cp ../SukiSU_patch/69_hide_stuff.patch ./
          patch -p1 < 69_hide_stuff.patch

      - name: 应用 lz4kd 补丁
        run: |
          if [[ "${{ github.event.inputs.lz4k_enable }}" == "true" ]]; then
            echo "正在添加lz4kd补丁…"
            cd kernel_workspace/common
            cp -r ../SukiSU_patch/other/zram/lz4k/include/linux/* ./include/linux/
            cp -r ../SukiSU_patch/other/zram/lz4k/lib/* ./lib
            cp -r ../SukiSU_patch/other/zram/lz4k/crypto/* ./crypto
            cp ../SukiSU_patch/other/zram/zram_patch/${{ env.KERNEL_VERSION }}/lz4kd.patch ./
            patch -p1 -F 3 < lz4kd.patch || true
          fi
          
      - name: 添加 SukiSU-Ultra & SUSFS 配置项
        run: |
          cd kernel_workspace
          echo "CONFIG_KSU=y" >> ./common/arch/arm64/configs/gki_defconfig
          if [ "${{ github.event.inputs.kpm_enable }}" == "true" ]; then
            echo "CONFIG_KPM=y" >> ./common/arch/arm64/configs/gki_defconfig
          fi
          if [ "${{ github.event.inputs.hook_method }}" == "kprobes" ]; then
            echo "正在开启kprobes钩子..."
            echo "CONFIG_KSU_SUSFS_SUS_SU=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_MANUAL_HOOK=n" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_KPROBES_HOOK=y" >> ./common/arch/arm64/configs/gki_defconfig
          else
            echo "正在开启manual钩子..."
            echo "CONFIG_KSU_MANUAL_HOOK=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> ./common/arch/arm64/configs/gki_defconfig
          fi
          echo "CONFIG_KSU_SUSFS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./common/arch/arm64/configs/gki_defconfig
          #echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./common/arch/arm64/configs/gki_defconfig
          if [[ "${{ github.event.inputs.lz4k_enable }}" == "true" ]]; then
            echo "CONFIG_ZSMALLOC=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_CRYPTO_LZ4HC=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_CRYPTO_LZ4K=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_CRYPTO_LZ4KD=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_CRYPTO_842=y" >> ./common/arch/arm64/configs/gki_defconfig
            # 以下配置未核实必要性，待测试
            #echo "CONFIG_ZRAM_WRITEBACK=y" >> ./common/arch/arm64/configs/gki_defconfig
            #sed -i 's/CONFIG_ZRAM=m/CONFIG_ZRAM=y/g' ./common/arch/arm64/configs/gki_defconfig
            #sed -i 's/CONFIG_MODULE_SIG=y/CONFIG_MODULE_SIG=n/g' ./common/arch/arm64/configs/gki_defconfig
          fi
          # 开启O2编译优化配置
          echo "CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y" >> ./common/arch/arm64/configs/gki_defconfig
          #禁用 defconfig 检查
          sed -i 's/check_defconfig//' ./common/build.config.gki
          
      - name: 启用网络功能增强优化配置
        run: |
          cd kernel_workspace
          if [ "${{ github.event.inputs.better_net }}" == "true" ]; then
            #启用  BPF 流解析器,实现高性能网络流量处理,增强网络监控和分析能力
            echo "CONFIG_BPF_STREAM_PARSER=y" >> ./common/arch/arm64/configs/gki_defconfig
            #开启增强 Netfilter 防火墙扩展模块,支持基于地址类型的匹配规则,启用 IP 集合支持,提高防火墙规则灵活性,支持更复杂的流量过滤策略
            echo "CONFIG_NETFILTER_XT_MATCH_ADDRTYPE=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_NETFILTER_XT_SET=y" >> ./common/arch/arm64/configs/gki_defconfig
            #启用 IP 集框架及其多种数据结构实现,提供高效的大规模 IP 地址管理,提高防火墙规则处理效率,减少内存占用
            echo "CONFIG_IP_SET=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_MAX=65534" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_BITMAP_IP=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_BITMAP_IPMAC=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_BITMAP_PORT=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_IP=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_IPMARK=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_IPPORT=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_IPPORTIP=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_IPPORTNET=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_IPMAC=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_MAC=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_NETPORTNET=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_NET=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_NETNET=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_NETPORT=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_HASH_NETIFACE=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP_SET_LIST_SET=y" >> ./common/arch/arm64/configs/gki_defconfig
            #启用 IPv6 网络地址转换
            echo "CONFIG_IP6_NF_NAT=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_IP6_NF_TARGET_MASQUERADE=y" >> ./common/arch/arm64/configs/gki_defconfig
            #由于部分机型的vintf兼容性检测规则，在开启CONFIG_IP6_NF_NAT后开机会出现"您的设备内部出现了问题。请联系您的设备制造商了解详情。"的提示，故添加一个配置修复补丁，在编译内核时隐藏CONFIG_IP6_NF_NAT=y但不影响对应功能编译
            cd common
            wget https://github.com/cctv18/oppo_oplus_realme_sm8650/raw/refs/heads/main/other_patch/config.patch
            patch -p1 -F 3 < config.patch || true
          fi
          
      - name: 添加 BBR 等一系列拥塞控制算法
        run: |
          if [[ "${{ github.event.inputs.bbr_enable }}" == "true" || "${{ github.event.inputs.bbr_enable }}" == "default" ]]; then
            echo "正在添加BBR等拥塞控制算法..."
            cd kernel_workspace
            #开启TCP拥塞控制算法控制器（必需）
            echo "CONFIG_TCP_CONG_ADVANCED=y" >> ./common/arch/arm64/configs/gki_defconfig
            ################################################################################################################################
            # BBR：基于链路容量的代表拥塞控制算法，不再使用丢包、延时等信号去衡量拥塞是否发生，而是直接对网络建模来应对、避免真实的网络拥塞；
            # 具有高吞吐、低延迟、抗丢包的特点，但在手机上使用时由于持续探测带宽/RTT、高频计算与发包增加 CPU 和射频模块功耗，会增加耗电及发热；
            # 且移动基站缓冲区深度通常较小（~50ms），BBR 的带宽探测阶段（ProbeRTT）过度降窗可能导致吞吐量骤降，且网络切换（WiFi→5G）时需重新
            # 探测参数，反而增加延迟或导致速率振荡（短暂卡顿），且存在 RTT 不公平性，与基于丢包的流竞争时可能过于强势，在混合网络环境中
            #（如 BBR + CUBIC 共存），BBR 会抢占更多其他软件的带宽，降低其他应用的公平性（如后台软件更新影响前台视频播放）。
            # 因此，虽然BBR可以显著减少排队延迟，抗丢包能力强，带宽利用率高，但由于其会增加耗电，且易导致网络速率波动，故安卓系统默认不使用
            # BBR拥塞算法，而是使用在吞吐量、稳定性、兼容性、能效之间取得最佳平衡的CUBIC算法。在开启BBR前，请考虑自己是否真的有使用BBR的必要。
            ################################################################################################################################
            echo "CONFIG_TCP_CONG_BBR=y" >> ./common/arch/arm64/configs/gki_defconfig
            #CUBIC：安卓的默认TCP拥塞控制算法，在吞吐量、稳定性、兼容性、能效之间取得最佳平衡，具有高兼容性与公平性、抗网络波动性强、低计算开销的特点，是绝大部分移动场景的优先选择
            echo "CONFIG_TCP_CONG_CUBIC=y" >> ./common/arch/arm64/configs/gki_defconfig
            #VEGAS：基于时延的拥塞控制算法之一，将回路响应时间（Round Trip Time，RTT）增加视为出现拥塞，增加时增大拥塞窗口，减小时减小拥塞窗口
            echo "CONFIG_TCP_CONG_VEGAS=y" >> ./common/arch/arm64/configs/gki_defconfig
            #New Vegas：Vegas 算法的改进版，优化了 RTT 测量和竞争公平性，可以更准确地检测拥塞，与 Reno/CUBIC 共存能力提升
            echo "CONFIG_TCP_CONG_NV=y" >> ./common/arch/arm64/configs/gki_defconfig
            #Westwood+：基于带宽估计（ACK 到达率）动态设置拥塞窗口和慢启动阈值；快速恢复，适合无线网络（区分拥塞丢包与无线丢包）
            echo "CONFIG_TCP_CONG_WESTWOOD=y" >> ./common/arch/arm64/configs/gki_defconfig
            #HTCP：一种基于损失的算法，使用 AIMD 来控制拥塞窗口，根据 RTT 动态调整增长因子，结合延迟和丢包信号，针对高延迟的高速网络进行优化
            echo "CONFIG_TCP_CONG_HTCP=y" >> ./common/arch/arm64/configs/gki_defconfig
            #brutal：一种通过主动探测 + 激进抢占最大化吞吐量的拥塞算法，无拥塞窗口上限，轻度丢包（<20%）不降窗，避免类似 BBR 的 ProbeRTT 阶段，
            #持续维持高发送速率，与 Reno/CUBIC 共存时，Brutal 可通过高频发包抢占 90%+ 带宽，适用于高丢包弱网环境（如公共 Wi-Fi、蜂窝网络）及
            #直播推流、云游戏上行链路等需优先保证吞吐量而非延迟敏感的场景，提升弱网吞吐性能，对抗运营商 QoS 限速。但由于TCP Brutal 仅在应用程序
            #对每个 TCP 连接设置带宽参数之后才能正常工作，绝大部分安卓应用都不支持该操作，故请勿将 TCP Brutal 设置成默认拥塞控制算法。
            echo "CONFIG_TCP_CONG_BRUTAL=y" >> ./common/arch/arm64/configs/gki_defconfig
            if [ "${{ github.event.inputs.bbr_enable }}" == "default" ]; then
              echo "正在将BBR设为默认拥塞控制算法..."
              echo "CONFIG_DEFAULT_TCP_CONG=bbr" >> ./common/arch/arm64/configs/gki_defconfig
            else
              echo "CONFIG_DEFAULT_TCP_CONG=cubic" >> ./common/arch/arm64/configs/gki_defconfig
            fi
          fi

      - name: 启用三星SSG IO调度器
        run: |
          if [[ "${{ github.event.inputs.ssg_enable }}" == "true" ]]; then
            echo "正在启用三星SSG IO调度器…"
            cd kernel_workspace
            echo "CONFIG_MQ_IOSCHED_SSG=y" >> ./common/arch/arm64/configs/gki_defconfig
            echo "CONFIG_MQ_IOSCHED_SSG_CGROUP=y" >> ./common/arch/arm64/configs/gki_defconfig
          fi

      - name: 添加制作名称
        run: |
          cd kernel_workspace
          echo "替换内核版本后缀..."
          if [[ -n "${{ github.event.inputs.kernel_suffix }}" ]]; then
            echo "当前内核版本后缀：${{ github.event.inputs.kernel_suffix }}"
            for f in ./common/scripts/setlocalversion; do
              sed -i "\$s|echo \"\\\$res\"|echo \"-${{ github.event.inputs.kernel_suffix }}\"|" "$f"
            done
          else
            echo "当前内核版本后缀：${{ env.KERNEL_NAME }}"
            for f in ./common/scripts/setlocalversion; do
              sed -i "\$s|echo \"\\\$res\"|echo \"-${{ env.KERNEL_NAME }}\"|" "$f"
            done
          fi
           
      - name: 构建内核
        run: |
          cd kernel_workspace
          if [[ ${{ github.event.inputs.scx_enable }} == "true" ]]; then
            git clone https://github.com/cctv18/sched_ext.git
            rm -rf ./sched_ext/.git
            rm -rf ./sched_ext/README.md
            cp -r ./sched_ext/* ./common/kernel/sched
          fi
          cd common
          make -j$(nproc --all) LLVM=-20 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CROSS_COMPILE_ARM32=arm-linux-gnuabeihf- CC=clang LD=ld.lld HOSTCC=clang HOSTLD=ld.lld O=out KCFLAGS+=-O2 KCFLAGS+=-Wno-error gki_defconfig all
          echo "内核编译完成！"
         
      - name: 应用patch_linux并修补内核
        if: ${{ github.event.inputs.kpm_enable == 'true' }}
        run: |
          cd kernel_workspace/common/out/arch/arm64/boot
          curl -LO https://github.com/ShirkNeko/SukiSU_KernelPatch_patch/releases/download/0.12.0/patch_linux
          chmod +x patch_linux
          ./patch_linux
          rm -f Image
          mv oImage Image
          
      - name: 克隆 AnyKernel3 并打包
        run: |
          cd kernel_workspace
          git clone https://github.com/cctv18/AnyKernel3 --depth=1
          rm -rf ./AnyKernel3/.git
          cd AnyKernel3
          cp ../common/out/arch/arm64/boot/Image ./Image
          if [ ! -f ./Image ]; then
            echo "未找到内核镜像文件，构建可能出错"
            exit 1
          fi
          if [[ ${{ github.event.inputs.lz4k_enable }} == "true" ]]; then
            wget https://raw.githubusercontent.com/cctv18/oppo_oplus_realme_sm8650/refs/heads/main/zram.zip
          fi
          if [[ -n "${{ github.event.inputs.kernel_suffix }}" ]]; then
            zip -r ../AnyKernel3_SukiSU_${{ env.KSUVER }}_${{ env.KERNEL_VERSION }}_A15_${{ github.event.inputs.kernel_suffix }}.zip ./*
          else
            zip -r ../AnyKernel3_SukiSU_${{ env.KSUVER }}_${{ env.KERNEL_VERSION }}_A15_${{ env.KERNEL_NAME }}.zip ./*
          fi

      - name: 上传 ZIP 工件
        uses: actions/upload-artifact@v4
        with:
          name: Kernel_ZIP_Artifacts
          path: ${{ github.workspace }}/kernel_workspace/*.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      actions: read
      
    steps:
      - name: 下载 ZIP 工件
        uses: actions/download-artifact@v4
        with:
          name: Kernel_ZIP_Artifacts
          path: ./release_zips

      - name: 设置环境变量
        run: |
          if [[ -n "${{ github.event.inputs.kernel_suffix }}" ]]; then
            FULL_VERSION=${{ format('{0}.118-{1}', env.KERNEL_VERSION, github.event.inputs.kernel_suffix) }}
            echo "FULL_VERSION=$FULL_VERSION" >> $GITHUB_ENV
            export FULL_VERSION=$FULL_VERSION
          else
            FULL_VERSION=${{ format('{0}.118-{1}', env.KERNEL_VERSION, env.KERNEL_NAME) }}
            echo "FULL_VERSION=$FULL_VERSION" >> $GITHUB_ENV
            export FULL_VERSION=$FULL_VERSION
          fi
          TIME="$(TZ='Asia/Shanghai' date +'%y%m%d%H%M%S')"
          TIME_FORM="$(TZ='Asia/Shanghai' date +'%Y-%m-%d %H:%M:%S')"
          echo "TIME=$TIME" >> $GITHUB_ENV
          echo "TIME_FORM=$TIME_FORM" >> $GITHUB_ENV
          TAG_HEAD="OPPO+OPlus+Realme-A15-build"
          echo "TAG_HEAD=$TAG_HEAD" >> $GITHUB_ENV
         
      - name: 创建发布
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "${{ env.TAG_HEAD }}-${{ env.TIME }}"
          name: "${{ env.TAG_HEAD }}-${{ env.FULL_VERSION }}"
          body: |
            ### 📱 欧加真 Android 15 SukiSU-Ultra SM8650 通用内核 | 构建信息
            - 内核版本号: ${{ env.FULL_VERSION }}
            - 编译时间: ${{ env.TIME_FORM }}
            - 机型：欧加真骁龙8Gen3 6.1 Android 15内核通用（基于一加12 Android 15 版官方OKI源码）
            - 特性：SukiSU Ultra + SUSFS + VFS + KPM
            - hook模式：${{ github.event.inputs.hook_method }}
            - LZ4KD支持：${{ github.event.inputs.lz4k_enable }}
            - LZ4支持：${{ github.event.inputs.lz4_enable }}
            - 网络功能增强：${{ github.event.inputs.better_net }}
            - BBR/Brutal 等拥塞控制算法支持：${{ github.event.inputs.bbr_enable }}
            - 三星SSG IO调度器支持：${{ github.event.inputs.ssg_enable }}
            - 风驰内核支持：${{ github.event.inputs.scx_enable }}
            - 推荐系统：ColorOS 15 / RealmeUI 6.0
            - SukiSU管理器下载：[SukiSU-Ultra](https://github.com/ShirkNeko/SukiSU-Ultra/releases)
            ### ⏫️ 更新内容：
            - 更新SukiSU Ultra至最新版本（${{ needs.build.outputs.ksuver }}）
            - (预留)
            ### 📋 安装方法 | Installation Guide
            1. 若你的手机已经安装了第三方Recovery（如TWRP)，可下载对应机型的AnyKernel刷机包后进入Recovery模式，通过Recovery刷入刷机包后重启设备
            2. 若你的手机之前已有 root 权限，可在手机上安装[HorizonKernelFlasher](https://github.com/libxzr/HorizonKernelFlasher/releases)，在HorizonKernelFlasher中刷入AnyKernel刷机包并重启
            3. 若你之前已刷入SukiSU Ultra内核，且SukiSU Ultra管理器已更新至最新版本，可在SukiSU Ultra管理器中直接刷入AnyKernel刷机包并重启
            4. 刷入无lz4kd补丁版的内核前若刷入过lz4kd补丁版的内核，为避免出错，请先关闭zram模块
            #### ※※※刷写内核有风险，为防止出现意外导致手机变砖，在刷入内核前请务必用[KernelFlasher](https://github.com/capntrips/KernelFlasher)等软件备份boot等关键启动分区!※※※
          draft: false
          prerelease: false
          files: |
            release_zips/AnyKernel3_*.zip
